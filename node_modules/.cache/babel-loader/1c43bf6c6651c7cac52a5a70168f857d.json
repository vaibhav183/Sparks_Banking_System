{"ast":null,"code":"import _defineProperty from \"C:/Users/vp789/Desktop/Work_Project/Spark-Banking-System/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:/Users/vp789/Desktop/Work_Project/Spark-Banking-System/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\", \"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetCssVar from './createGetCssVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _options$theme = options.theme,\n      defaultTheme = _options$theme === void 0 ? {} : _options$theme,\n      _options$defaultMode = options.defaultMode,\n      desisgnSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n      designSystemColorScheme = options.defaultColorScheme,\n      _options$disableTrans = options.disableTransitionOnChange,\n      designSystemTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n      _options$enableColorS = options.enableColorScheme,\n      designSystemEnableColorScheme = _options$enableColorS === void 0 ? true : _options$enableColorS,\n      _options$prefix = options.prefix,\n      designSystemPrefix = _options$prefix === void 0 ? '' : _options$prefix,\n      shouldSkipGeneratingVar = options.shouldSkipGeneratingVar,\n      resolveTheme = options.resolveTheme;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    var children = _ref.children,\n        _ref$theme = _ref.theme,\n        themeProp = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n        _ref$prefix = _ref.prefix,\n        prefix = _ref$prefix === void 0 ? designSystemPrefix : _ref$prefix,\n        _ref$modeStorageKey = _ref.modeStorageKey,\n        modeStorageKey = _ref$modeStorageKey === void 0 ? DEFAULT_MODE_STORAGE_KEY : _ref$modeStorageKey,\n        _ref$colorSchemeStora = _ref.colorSchemeStorageKey,\n        colorSchemeStorageKey = _ref$colorSchemeStora === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _ref$colorSchemeStora,\n        _ref$attribute = _ref.attribute,\n        attribute = _ref$attribute === void 0 ? DEFAULT_ATTRIBUTE : _ref$attribute,\n        _ref$defaultMode = _ref.defaultMode,\n        defaultMode = _ref$defaultMode === void 0 ? desisgnSystemMode : _ref$defaultMode,\n        _ref$defaultColorSche = _ref.defaultColorScheme,\n        defaultColorScheme = _ref$defaultColorSche === void 0 ? designSystemColorScheme : _ref$defaultColorSche,\n        _ref$disableTransitio = _ref.disableTransitionOnChange,\n        disableTransitionOnChange = _ref$disableTransitio === void 0 ? designSystemTransitionOnChange : _ref$disableTransitio,\n        _ref$enableColorSchem = _ref.enableColorScheme,\n        enableColorScheme = _ref$enableColorSchem === void 0 ? designSystemEnableColorScheme : _ref$enableColorSchem,\n        _ref$storageWindow = _ref.storageWindow,\n        storageWindow = _ref$storageWindow === void 0 ? typeof window === 'undefined' ? undefined : window : _ref$storageWindow,\n        _ref$documentNode = _ref.documentNode,\n        documentNode = _ref$documentNode === void 0 ? typeof document === 'undefined' ? undefined : document : _ref$documentNode,\n        _ref$colorSchemeNode = _ref.colorSchemeNode,\n        colorSchemeNode = _ref$colorSchemeNode === void 0 ? typeof document === 'undefined' ? undefined : document.documentElement : _ref$colorSchemeNode,\n        _ref$colorSchemeSelec = _ref.colorSchemeSelector,\n        colorSchemeSelector = _ref$colorSchemeSelec === void 0 ? ':root' : _ref$colorSchemeSelec;\n    var hasMounted = React.useRef(false);\n\n    var _themeProp$colorSchem = themeProp.colorSchemes,\n        colorSchemes = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n        _themeProp$components = themeProp.components,\n        components = _themeProp$components === void 0 ? {} : _themeProp$components,\n        restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    var allColorSchemes = Object.keys(colorSchemes);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    var _useCurrentColorSchem = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: modeStorageKey,\n      colorSchemeStorageKey: colorSchemeStorageKey,\n      defaultMode: defaultMode,\n      storageWindow: storageWindow\n    }),\n        mode = _useCurrentColorSchem.mode,\n        setMode = _useCurrentColorSchem.setMode,\n        systemMode = _useCurrentColorSchem.systemMode,\n        lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n        darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n        colorScheme = _useCurrentColorSchem.colorScheme,\n        setColorScheme = _useCurrentColorSchem.setColorScheme;\n\n    var resolvedColorScheme = function () {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    }();\n\n    var theme = restThemeProp;\n\n    var _cssVarsParser = cssVarsParser(theme, {\n      prefix: prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar: shouldSkipGeneratingVar\n    }),\n        rootCss = _cssVarsParser.css,\n        rootVars = _cssVarsParser.vars,\n        parsedTheme = _cssVarsParser.parsedTheme;\n\n    theme = _extends({}, parsedTheme, {\n      components: components,\n      colorSchemes: colorSchemes,\n      prefix: prefix,\n      vars: rootVars,\n      getCssVar: createGetCssVar(prefix)\n    });\n    var styleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          scheme = _ref3[1];\n\n      var _cssVarsParser2 = cssVarsParser(scheme, {\n        prefix: prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar: shouldSkipGeneratingVar\n      }),\n          css = _cssVarsParser2.css,\n          vars = _cssVarsParser2.vars,\n          parsedScheme = _cssVarsParser2.parsedTheme;\n\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === resolvedColorScheme) {\n        theme = _extends({}, theme, parsedScheme);\n\n        if (theme.palette) {\n          // assign runtime mode & colorScheme\n          theme.palette.mode = mode;\n          theme.palette.colorScheme = resolvedColorScheme;\n        }\n      }\n\n      var resolvedDefaultColorScheme = function () {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      }();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[colorSchemeSelector] = css;\n      } else {\n        styleSheet[\"\".concat(colorSchemeSelector === ':root' ? '' : colorSchemeSelector, \"[\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n    React.useEffect(function () {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n    useEnhancedEffect(function () {\n      if (!mode || !enableColorScheme || !colorSchemeNode) {\n        return undefined;\n      }\n\n      var priorColorScheme = colorSchemeNode.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        colorSchemeNode.style.setProperty('color-scheme', systemMode);\n      } else {\n        colorSchemeNode.style.setProperty('color-scheme', mode);\n      }\n\n      return function () {\n        colorSchemeNode.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme, colorSchemeNode]);\n    React.useEffect(function () {\n      var timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        var css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (function () {\n          return window.getComputedStyle(documentNode.body);\n        })();\n\n        timer = setTimeout(function () {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return function () {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(function () {\n      hasMounted.current = true;\n      return function () {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode: mode,\n        setMode: setMode,\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme,\n        colorScheme: colorScheme,\n        setColorScheme: setColorScheme,\n        allColorSchemes: allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: _defineProperty({}, colorSchemeSelector, rootCss)\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["C:/Users/vp789/Desktop/Work_Project/Spark-Banking-System/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","unstable_useEnhancedEffect","useEnhancedEffect","GlobalStyles","cssVarsParser","ThemeProvider","getInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","createGetCssVar","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","defaultMode","desisgnSystemMode","designSystemColorScheme","defaultColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","enableColorScheme","designSystemEnableColorScheme","prefix","designSystemPrefix","shouldSkipGeneratingVar","resolveTheme","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","modeStorageKey","colorSchemeStorageKey","attribute","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","hasMounted","useRef","components","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","resolvedColorScheme","basePrefix","rootCss","css","rootVars","vars","parsedTheme","getCssVar","styleSheet","entries","forEach","key","scheme","parsedScheme","palette","resolvedDefaultColorScheme","useEffect","setAttribute","priorColorScheme","style","getPropertyValue","setProperty","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","any","oneOfType","object","bool"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetCssVar from './createGetCssVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    enableColorScheme: designSystemEnableColorScheme = true,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar,\n    resolveTheme\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    prefix = designSystemPrefix,\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    attribute = DEFAULT_ATTRIBUTE,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    enableColorScheme = designSystemEnableColorScheme,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root'\n  }) {\n    const hasMounted = React.useRef(false);\n\n    const {\n      colorSchemes = {},\n      components = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    let theme = restThemeProp;\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(theme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      prefix,\n      vars: rootVars,\n      getCssVar: createGetCssVar(prefix)\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === resolvedColorScheme) {\n        theme = _extends({}, theme, parsedScheme);\n\n        if (theme.palette) {\n          // assign runtime mode & colorScheme\n          theme.palette.mode = mode;\n          theme.palette.colorScheme = resolvedColorScheme;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[colorSchemeSelector] = css;\n      } else {\n        styleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme || !colorSchemeNode) {\n        return undefined;\n      }\n\n      const priorColorScheme = colorSchemeNode.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        colorSchemeNode.style.setProperty('color-scheme', systemMode);\n      } else {\n        colorSchemeNode.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        colorSchemeNode.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme, colorSchemeNode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"]},"metadata":{},"sourceType":"module"}